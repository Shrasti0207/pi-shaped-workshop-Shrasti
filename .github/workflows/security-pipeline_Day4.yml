name: Secure Pipeline scans - Day 4

on:
  push:
    branches:
      - main
      - master            
  pull_request:
    branches:
      - main 
      - master

jobs:
  sast_scans:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        working-directory: day4

      - name: Run Bandit (Python SAST)
        id: bandit
        run: |
          pip install bandit
          bandit -r . -f html -o bandit-report.html || true
        working-directory: day4
        shell: bash
        continue-on-error: true

      - name: Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: day4/bandit-report.html

      - name: Run Semgrep (Default Behavior)
        id: semgrep
        run: |
          pip install semgrep
          semgrep --config=auto --json --output=semgrep-report.json || true
        working-directory: day4
        shell: bash
        continue-on-error: true

      - name: Upload Semgrep Json Report
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-json-report
          path: day4/semgrep-report.json

  trivy_scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy File System Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
            scan-type: fs       # file system scan (repo code)
            format: json        # generate HTML report
            output: day4/trivy-report.json
            ignore-unfixed: true
            vuln-type: "os,library"
        continue-on-error: true

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: day4/trivy-report.json

  dast_scan:
    runs-on: ubuntu-latest
    needs: [sast_scans, trivy_scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      -       - name: Install dependencies (verbose)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "---- pip freeze ----"
          pip freeze
          echo "---- pip show flask ----"
          pip show flask || true
        working-directory: day4
        shell: bash

      - name: Start Flask App (debug-friendly)
        run: |
          set -x
          echo "Starting app in background (unbuffered output)..."
          # start unbuffered so logs show up immediately
          python -u app.py > app.log 2>&1 &
          echo $! > flask_pid.txt
          sleep 1
          echo "Process list (python related):"
          ps -ef | grep python || true
          echo "Check listening ports for 5000:"
          ss -lntp | grep :5000 || true
          echo "Waiting for app to be reachable (max 60s)..."
          for i in {1..20}; do
            if curl --fail --max-time 3 http://localhost:5000/; then
              echo "Flask is up!"
              break
            fi
            echo "Waiting (${i})..."
            sleep 3
          done
          echo "---- tail app.log (last 200 lines) ----"
          tail -n 200 app.log || true
        working-directory: day4
        shell: bash
        continue-on-error: true

      - name: Upload debugging artifacts (app log + pid)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: flask-debug-artifacts
          path: |
            day4/app.log
            day4/flask_pid.txt
